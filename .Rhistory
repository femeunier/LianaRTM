remotes::install_github("ashiklom/rrtm")
setwd("/home/femeunier/Documents/R/rrtm")
remotes::install_github("ashiklom/rrtm")
devtools::clean_dll()
remotes::install_github("ashiklom/rrtm")
# Small function for better regular expressions
regex <- function(string, pattern) {
m <- regexec(pattern, string, perl = TRUE)
regmatches(string, m)
}
install.packages("Rcpp")
install.packages("RcppArmadillo")
devtools::clean_dll()
remotes::install_github("ashiklom/rrtm")
.libPaths()
example <- edr_r(
# Cohort state variables, in order from tallest to shortest
pft = c(1, 1, 2),
lai = c(2, 1, 0.8),
wai = c(0.01, 0.01, 0.01),
cai = c(1, 1, 1),
# PFT-level parameters -- indexed by `pft` above
N = c(1.4, 1.5),
Cab = c(40, 30),
Car = c(8, 8),
Cw = c(0.01, 0.01),
Cm = c(0.008, 0.01),
orient_factor = c(0.5, 0.5),
clumping_factor = c(0.84, 0.735),
# Global parameters
soil_moisture = 0.5,
direct_sky_frac = 0.9,
czen = 1
)
library(rrtm)  # remotes::install_github("ashiklom/rrtm")
example <- edr_r(
# Cohort state variables, in order from tallest to shortest
pft = c(1, 1, 2),
lai = c(2, 1, 0.8),
wai = c(0.01, 0.01, 0.01),
cai = c(1, 1, 1),
# PFT-level parameters -- indexed by `pft` above
N = c(1.4, 1.5),
Cab = c(40, 30),
Car = c(8, 8),
Cw = c(0.01, 0.01),
Cm = c(0.008, 0.01),
orient_factor = c(0.5, 0.5),
clumping_factor = c(0.84, 0.735),
# Global parameters
soil_moisture = 0.5,
direct_sky_frac = 0.9,
czen = 1
)
devtools::clean_dll()
remotes::install_github("ashiklom/rrtm")
library(LianaRTM)
rm(list = ls())
library(rrtm)  # remotes::install_github("ashiklom/rrtm")
example <- edr_r(
# Cohort state variables, in order from tallest to shortest
pft = c(1, 1, 2),
lai = c(2, 1, 0.8),
wai = c(0.01, 0.01, 0.01),
cai = c(1, 1, 1),
# PFT-level parameters -- indexed by `pft` above
N = c(1.4, 1.5),
Cab = c(40, 30),
Car = c(8, 8),
Cw = c(0.01, 0.01),
Cm = c(0.008, 0.01),
orient_factor = c(0.5, 0.5),
clumping_factor = c(0.84, 0.735),
# Global parameters
soil_moisture = 0.5,
direct_sky_frac = 0.9,
czen = 1
)
# Inspect the `example` object:
str(example)
# Result is a list containing the top-of-canopy albedo, and additional
# information about the light levels by cohort layer. `2101` is the number of
# wavelengths -- 400-2500nm at 1 nm resolution. There are 3 cohorts in this
# simulation, so there are 4 `up` and `down` fluxes -- one for each cohort
# layer, plus the ground (soil) layer.
# Below, we do a simple plot of the albedo.
plot(400:2500, example$albedo, type = "l",
xlab = "Wavelength (nm)",
ylab = "Albedo [0, 1]")
rm(list = ls())
library(rrtm)  # remotes::install_github("ashiklom/rrtm")
out <- prospect5(1.4, 40, 10, 0, 0.01, 0.01)
plot(c(400, 2500), c(0, 1), type = "n",
xlab = "Wavelength (nm)",
ylab = "Spectra")
lines(400:2500, out$reflectance, col = "red")
lines(400:2500, 1 - out$transmittance, col = "blue")
legend("top", legend = c("reflectance", "1 - transmittance"),
lty = 1, col = c("red", "blue"))
sail_out <- pro4sail_5(N = 1.4, Cab = 40, Car = 10, Cbrown = 0,
Cw = 0.01, Cm = 0.01,
LAI = 3, soil_moisture = 0.5)
matplot(400:2500, do.call(cbind, sail_out),
xlab = "Wavelength (nm)", ylab = "Reflectance (0-1)",
type = "l", lty = "solid", col = 1:4)
legend("topright", c("BHR", "DHR", "HDR", "BDR"),
lty = "solid", col = 1:4)
rm(list = ls())
library(ncdf4)
library(rrtm)
# Small function for better regular expressions
regex <- function(string, pattern) {
m <- regexec(pattern, string, perl = TRUE)
regmatches(string, m)
}
# Some sample outputs are available from here (~15M):
# https://github.com/ashiklom/rrtm/releases/download/edr-example/output.tar.gz
# List output files, and extract the years (for plotting later). Modify the
# `outdir` as appropriate.
outdir <- "./output-bg-small"
outfiles <- list.files(outdir, "\\.h5$", full.names = TRUE)
ym <- regex(outfiles, "(?<=-E-)([[:digit:]]{4})-([[:digit:]]{2})")
years <- as.numeric(sapply(ym, "[[", 2))
# Set PFT-level RTM parameters. NPFT here is because the PFT parameters are
# indexed by integer, and the largest PFT number in these simulations is 11
# (Temperate late-successional hardwood).
npft <- 11
N <- rep(1.4, npft)
N[c(6, 8)] <- 2.0
Cab <- rep(40, npft)
Car <- rep(10, npft)
Cw <- rep(0.01, npft)
Cm <- rep(0.01, npft)
Cm[c(6, 8)] <- 0.02
orient_factor <- rep(0.5, npft)
clumping_factor <- rep(0.84, npft)
clumping_factor[c(6, 8)] <- 0.735
# A few global parameters
soil_brightness <- 0.5   # Hapke model parameter
czen <- 0.85             # Approximate value for July at UMBS
direct_sky_frac <- 0.9   # Assume relatively clear sky
# Empty lists for storing results.
pft_list <- list()
lai_list <- list()
wai_list <- list()
results <- list()
pb <- txtProgressBar(style = 3)
for (i in seq_along(outfiles)) {
f <- outfiles[i]
nc <- nc_open(f)
pft <- ncvar_get(nc, "PFT")
lai <- ncvar_get(nc, "MMEAN_LAI_CO")
wai <- ncvar_get(nc, "WAI_CO")
nc_close(nc)
cai <- rep(1, length(pft))
pft_list[[f]] <- pft
lai_list[[f]] <- lai
wai_list[[f]] <- wai
results[[f]] <- edr_r(
pft = pft, lai = lai, wai = wai, cai = cai,
N = N, Cab = Cab, Car = Car, Cw = Cw, Cm = Cm,
orient_factor = orient_factor,
clumping_factor = clumping_factor,
soil_moisture = soil_brightness,
direct_sky_frac = direct_sky_frac,
czen = czen
)
setTxtProgressBar(pb, i / length(outfiles))
}
close(pb)
# Plot LAI to confirm that values are reasonable
lai_sum <- sapply(lai_list, sum)
plot(years, lai_sum, type = "l",
ylab = "Total LAI", xlab = "Year")
# Plot evolution of hyperspectral albedo through time
cols <- hcl.colors(length(years))
results_mat <- do.call(cbind, lapply(results, "[[", "albedo"))
matplot(400:2500, results_mat, type = "l",
xlab = "Wavelength (nm)",
ylab = "Albedo [0,1]",
lty = "solid", col = cols)
# List output files, and extract the years (for plotting later). Modify the
# `outdir` as appropriate.
outdir <- "./output-bg-small"
outfiles <- list.files(outdir, "\\.h5$", full.names = TRUE)
ym <- regex(outfiles, "(?<=-E-)([[:digit:]]{4})-([[:digit:]]{2})")
years <- as.numeric(sapply(ym, "[[", 2))
# Set PFT-level RTM parameters. NPFT here is because the PFT parameters are
# indexed by integer, and the largest PFT number in these simulations is 11
# (Temperate late-successional hardwood).
npft <- 11
N <- rep(1.4, npft)
N[c(6, 8)] <- 2.0
Cab <- rep(40, npft)
Car <- rep(10, npft)
Cw <- rep(0.01, npft)
Cm <- rep(0.01, npft)
Cm[c(6, 8)] <- 0.02
orient_factor <- rep(0.5, npft)
clumping_factor <- rep(0.84, npft)
clumping_factor[c(6, 8)] <- 0.735
# A few global parameters
soil_brightness <- 0.5   # Hapke model parameter
czen <- 0.85             # Approximate value for July at UMBS
direct_sky_frac <- 0.9   # Assume relatively clear sky
# Empty lists for storing results.
pft_list <- list()
lai_list <- list()
wai_list <- list()
results <- list()
pb <- txtProgressBar(style = 3)
for (i in seq_along(outfiles)) {
f <- outfiles[i]
nc <- nc_open(f)
pft <- ncvar_get(nc, "PFT")
lai <- ncvar_get(nc, "MMEAN_LAI_CO")
wai <- ncvar_get(nc, "WAI_CO")
nc_close(nc)
cai <- rep(1, length(pft))
pft_list[[f]] <- pft
lai_list[[f]] <- lai
wai_list[[f]] <- wai
results[[f]] <- edr_r(
pft = pft, lai = lai, wai = wai, cai = cai,
N = N, Cab = Cab, Car = Car, Cw = Cw, Cm = Cm,
orient_factor = orient_factor,
clumping_factor = clumping_factor,
soil_moisture = soil_brightness,
direct_sky_frac = direct_sky_frac,
czen = czen
)
setTxtProgressBar(pb, i / length(outfiles))
}
close(pb)
# Plot LAI to confirm that values are reasonable
lai_sum <- sapply(lai_list, sum)
plot(years, lai_sum, type = "l",
ylab = "Total LAI", xlab = "Year")
# Plot evolution of hyperspectral albedo through time
cols <- hcl.colors(length(years))
results_mat <- do.call(cbind, lapply(results, "[[", "albedo"))
matplot(400:2500, results_mat, type = "l",
xlab = "Wavelength (nm)",
ylab = "Albedo [0,1]",
lty = "solid", col = cols)
regex
regex
ym
library(LianaRTM)
